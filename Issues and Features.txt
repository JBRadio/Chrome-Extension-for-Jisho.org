Issue and Features


Table of Contents
  KNOWN ISSUES
  THOUGHTS / IMPROVEMENTS
  COMPLETED
  

------------
KNOWN ISSUES 
------------

++ <iframe> Functionality (Loading, CSS, Buttons interacting with <iframe>, Content Script)
    #. Window.history.back() doesn't properly go back one page for <iframe> sometimes
    
++ Google Chrome Extension UI (popup.css, popup.html, resizing extension, device specific, other)

++ Google Chrome tab browsing (Content script)
    #. Accessing Jisho.org in a tab will take advantage of the theme set in the extension

++ Session Persistence (New session of the extension doesn't remember what happened in the old session)
    #. Search bar typed characters aren't remembered on launch
    #. "Back" page history isn't remembered (window.history.back())


<iframe> Functionality (Loading, CSS, Buttons interacting with <iframe>, Content Script)
----------------------


Google Chrome Extension UI (popup.css, popup.html, resizing extension, device specific, other)
--------------------------


Google Chrome tab browsing (Content script)
--------------------------

    Issue: Accessing Jisho.org in a tab will take advantage of the theme set in the extension
        Setting the theme to dark in the extension will overwrite the CSS in any tab used with Jisho.org
    Workaround:
        Use the extension to set the theme to "Light" if dark is not the desired affect.
    Potential Dev Solutions:
        Look up how to identify if your current document is embedded into another document or has a parent document. If you have a parent document or know you are embedded, override the CSS, otherwise, do not. 


Session Persistence (New session of the extension doesn't remember what happened in the old session)
-------------------

   Issue: Search bar typed characters (typed in a previous session) aren't remembered on launch
      If you typed something into the search bar within the extension, closed the extension in any way, and 
      then opened the extension, your typed text in the searchbar will be gone. This is not saved. Instead
      the <iframe> URL will be seeded in one of the following conditions: Text selection from page > Last
      loaded search page results > Jisho.org homepage (default).
     Workaround:
      (i) Use a save method outside of the extension
          - Copy text from searchbar into another editor to save progress.
     Potential Dev Soluions:
      (A) Add an event listener to the injected DOM, something like window.unload or window.beforeunload, 
           to chrome.runtime.sendMessage and update the local storage value for something like "lastTyped"
     Cons:
      (A) How does the window.unload event tell the difference between recently typed text and the current   
           input text? Could the event not work because Chrome closes the extension before a message is 
           handled on the extension side?
           
           - Auto-save typed search
     Add an event listener to the input box on the Content Script
      On change, a chrome.runtime.sendMessage fires and is retrieved by the extension
       Popup.js processes the message and stores the data in lastTyped
     When the extension loads, first we check to seed the first URL <iframe> opens by
      #. Text selection > Last Typed > Last loaded search > Jisho.org
       If no page text found, check the saved "lastTyped"
        If no "last Typed, check the last loaded search
         If no "lastSearched", default to Jisho.org
       If text selected and last typed, confirm, before loading the <iframe> if the user would like text
        selection or lastTyped.
         - Alternatively, we could add an action sheet item to "Open last typed search" or something like that
         
    If lastTyped == lastSearched search criteria, clear value for lastTyped.
           
           
   Issue: Window.history.back() doesn't properly go back one page for <iframe> sometimes
      Sometimes clicking "Back" goes to the first page loads or skips previously loaded pages.
   Potential Dev Solutions:
      (A) Track pages loaded, in chrome.storage or non-persistent variable, and cycle backwards when "Back"     is clicked.
   
   
   Issue: "Back" page history isn't remembered (window.history.back())
      If you've used the extension before and started it again, the "Back" button will only work on new
      pages loaded in that session.
     Workaround:
      (i) If you've logged into Jisho.org, you will have a list of recent searches on the bottom of the page.
     Potential Dev Solutions:
      (A) Keep track of loaded pages, between 5-10, in local storage. 
           When loaded pages are tracked:
            - When the extension loads and text selection is present.
            - When the user searches for new terms.
           When loaded pages are not tracked:
            - When the back or forward button is pressed.
               * Compare the loaded page to our history. If it is there, don't save or change its position.
           When the back button is clicked:
            - When check to see if the <iframe> has a history to use (window.history.back())
            - Secondly, we default to local storage:
              * We get the current URL, compare it to the position in local storage and go back if
                we have an earlier saved page.
      (B) Create a link in the bottom bar called History (Only works with logged in account)
           When clicked, the content script gathers "Most Recent Searches" and sends to Popup.js.
            Then, Popup.js displays a <ul><li> of the search terms which the user can click.
           local storage. 



-----------------------
THOUGHTS / IMPROVEMENTS
-----------------------

 ++ Options page
 ++ Bottom bar for additional features as links
 ++ If <iframe> takes a considerable time to load jisho.org on extension open
 ++ Allow user access to Jisho.org related links (Facebook, Twitter, Mailto:Jisho.org)


   - If <iframe> takes a considerable time to load jisho.org on extension open, 
      consider using a persistent background html page (background.html) to host the <iframe>
      in the background and allow popup.html to adopt and/or clone the <iframe> node on the 
      popup.html page.
       Pros: Hopefully the loading of Jisho.org website is as short as possible consistently. 
             Also, last search results will appear when the extension opens and no current-tab 
             selected text is present.
       Cons: Persistent background.html will have an active process, which means that everything
             loading in the <iframe> or Jisho.org will continue to do so in the background. This
             will include advertisements I assume. 
       References:
             Google Background Pages: https://developer.chrome.com/extensions/background_pages
             Adopt/Clone iFrame Node Discussion: https://groups.google.com/a/chromium.org/forum/#!topic/chromium-extensions/us2cUTZl5ws
             DevDocs Clone: http://devdocs.io/dom/node/clonenode
             DevDocs Adopt: http://devdocs.io/dom/document/adoptnode
 
  - Bottom bar for additional features as links
     Action sheet: When a user clicks a bottom link, a <div><ul> appears at the bottom for them to 
      choose additional options.
       Go (Back, Forward, Top, Advanced Search Options, Forum, Open in a new Tab)
       Share (Bookmark, Copy link, Gmail/Email)
       Search (Text Selection, Last Characters Typed, Last Search Loaded)
       History (List Search Results (logged in feature) )
       - Maybe replace with icons
         Clock = History (<- = Back, -> = Forward)
       
     UI: 
          - Safari has on bottom: (Share), (Bookmarks), and (Switch tabs)
          - Chrome has on top: omnibox, tabs, "..." (More)
          - Bookmark: Bookmarks the current page
          - Open in a new tab: - Opens the current page in a new tab 
           (maybe user wants to use bookmarklet or something else.

  - Options page
     Remove theme button toggle for a preference on the Options page.
     Remove window button toggle for a preference on the Options page.
     Remove GitHub link for a listing on the Options page.
     Allow the user to have the CSS dark theme override preference when accessing Jisho.org outside the  
      extension (content script)
     Credits, Donate button
     Other ideas...
 
 
 
 ---------
 COMPLETED
 ---------
 
 ++ <iframe> Functionality
    #. Dark Theme: Original CSS shows first and then switches to dark (flashing of original CSS)
    #. <iframe> may load an invalid page on startup, seed, or search.
    #. Jisho.org has external links that do not open automatically in a new tab.
    
 ++ Google Chrome Extension UI (popup.css, popup.html, resizing extension, device specific, other)
    #. Darker (perhaps VGA monitors) blend dark colors for links on popup.html
    #. Extra vertical scrollbars on screens with low monitor vertical screen resolutions (VGA)
    
 
 <iframe> Functionality (Loading, CSS, Buttons interacting with <iframe>, Content Script)
 ----------------------

    Issue: Dark Theme: Original CSS shows first and then switches to dark (flashing of original CSS)
        When the url/webpage loads in the <iframe>, how do we make sure the dark theme is applied first or that it overrides the current CSS by being the one loaded after? How fast can we do this (seamless)?
        The speed of this happening could vary in each page load. Often the result is a "flash" of original CSS and then a change to the Dark theme.
    Fix: Use all events without a do...while loop, <iframe> background-color
        Events that we can work with: (We'll use all of them)
         1. Content Script.js - Applied when the content script is injected into the DOM via Chrome 
            Extension. We have access to the <iframe> DOM at this point and can manipulate directly.
              Check Chrome storage for active preference and then apply light/dark theme.
         2. Attach Javascript event listener to Popup.js' <iframe>'s load event.
              Check Chrome storage for active preference and then send a chrome.runtime message for the 
              content script to process and apply the theme to the document.
         3. Content Script.js / Popup.js - Messaging
              Create a message, on injection, to background.js/popup.js which will trigger two methods
                 Popup.js, on message received:
                    1. Send a chrome message which the content script will receive in its .onMessage 
                       listener
                    2. Use the "sendResponse", from .onMessage listener, function to directly send back
              On both message types, we run a check on storage preferences to see if we can load faster than <iframe>'s load event.
       Popup.html changes
        1. Change the background of the iframe loading pages to white or black based on theme. It has been
           proven that the background color of the <iframe> can blink in while the page is loading.
              
        When inserting the JishoYoake theme: (with access to DOM / Content script)
         1. Gather the <link> tags
         2. Loop through the <link> tags and determine if: (non-button click)
              a. the original CSS has loaded
              b. our custom Jisho Yoake theme has loaded
         3. Insert the JishoYoake theme
              a. (non-button click) only if the original theme has loaded and our custom one hasn't.
            
         *** Consider putting in a <style>body{background-color:black}</style> if theme is dark we cannot
         load our JishoYoake theme because the original hasn't been added yet.
         
        When removing the JishoYoake theme: (only processed from button click)
         1. Gather the <link> tags
         2. Loop through the <link> tags ** Backwards **
         3. Remove all instances where our custom JishoYoake theme was found.
         
         *** Consider removing any custom <style> tags.
        
        
    Additional Strategies on applying the dark theme to the <iframe>
        // Try:
        // Don't inject dark until the original Jisho.org CSS has been loaded. 
        //  A. Use do...while loop to check if original Jisho CSS has loaded and inject.
        //  B. Create a setTimeout if original CSS non-existent to check storage again.

        // Try:
        // Removing original CSS file and adding JishoYoake and vice versa
        //  A. Remove original jisho css on dom ready and on content script injection storage check
        //  B. Remember to add original theme when toggling to "Light"
        //      Add the original CSS Jisho file (hardcode) and remove dark CSS file references
        //  Cons: Http load for original CSS file may take a sec... maybe create a <style> load event to remove dark CSS

        // Open a persistent connection/port with popup or background.js to communicate with popup.js?

        /*
        // Is this faster than chrome storage? // No, no access to chrome.extension.getViews
        var popupWindows = chrome.extension.getViews({type:'popup'});
        var popup = popupWindows[0];
        var theme = popup.getElementById('btnTheme').innerHTML;
        console.log("Theme from popup: " + theme);
        themeClicked(theme);
        */
    Completed: 2016.04.04
    
    Issue: <iframe> may load an invalid page on startup, seed, or search.
        Starting the Jisho.org extension may show a Jisho.org webpage that is invalid. Jisho will say that the page you are on doesn't exist. On top of this, it may seem confusing as to what you can do next as the search bar is not present on the error page. Of course, I know you can use the link at the bottom to open another Jisho.org url but it may be too confusing for others. 
    Dev Solutions:
        The following areas will need to be addressed:
         - Text selection seeding (hightlight text > open browser action extension)
         - Right-click seeding (highlight text > right-click > Search Jisho.org)
         - Using the searchbar on Jisho.org but within browser action extension's iframe
         - Loaded 404 error page could be saved to the chrome stroage API which can seed
        (A) 404 page is loaded in iframe (chrome stroage / searchbar usage / seeded invalid url)
            1. iframe load event fires a message to get the href from the injected content script.
            2. content script receives the message and then checks to see if it loaded a 404 error page
            3. if the 404 error page is loaded, reassign url and do not save it in chrome storage
            ** reassign will remove invalid characters and refresh to see if that gets the user what they
               are looking for. Otherwise, homepage is used in reassignment.
        (B) Text selection seed leads to 404 page (content script)
            1. On browser action extension launch, the page is searched for selected text
            2. Selected text, if found, is filtered, and then seeds the iframe with a redirect
        (C) Right-click seeding to a new tabbed search
            1. Background.js, which handles the right-click context menu, now filters before seeding.
        (D) Chrome storage
            1. Incase chrome storage is called to save an invalid search url, it is now filtered first.
        (E) Educate visitors on Readme.md that these characters break the Jisho.org search page: . (period)
        (F) Create a Forum discussion on Jisho.org about two things:
            1. Characters that break the search url page
            2. 404 Error page should have searching functionality
            Created: http://jisho.org/forum/57085ba1d5dda75465000048-periods-in-search-criteria-breaks-search-and-404-error-page-suggestion
    Doesn't break Jisho: ( ) , @
    Breaks Jisho: . (periods)
    Completed: 2016.04.08
    
    Issue: Jisho.org has external links that do not open automatically in a new tab.
        Clicking on a link in the About page for Jisho.org or in the footer section of a search page, could load an external-to-Jisho.org page in the <iframe>. This caused issues with the navigation links in the bottom menu bar and also goes against the purpose of the Jisho.org chrome extensions. The <iframe> is not meant to be for browsing outside Jisho.org. The browsing functionality is very limited in an <iframe>/Extension when compared to the navigation of the main browser's tab.
    Dev Solutions:
        (A) Content script locates and creates a target="_blank" attribute to links leading to external 
            sites/webpages.
        (B) Back/Forward links work in case an external page is loaded.
        (C) Adv Search link can still be used to bring users back to Jisho.org.
    Jisho.org Forum Discussion:
        Submit forum discussion for webmaster to make all external links open in a new tab. I have    
        submitted discussion: http://jisho.org/forum/56fc6ae0d5dda719140002d0-please-consider-updating-links-that-lead-outside-jisho-dot-org-to-open-in-a-new-tab
         - Developer will not create target="_blank" attributes.
    Completed: 2016.04.12
 
 
 Google Chrome Extension UI (popup.css, popup.html, resizing extension, device specific, other)
--------------------------

    Issue: Darker (perhaps VGA monitors) blend dark colors for links on popup.html
        (Tested with a 15-17 inch VGA monitor) On older monitors (VGA) where colors may not be so vibrant, bright, or defined, it may be hard to see the link colors on a pure black background. 
    Potential Dev Solutions:
        Change the color in CSS:
    /* a.dark:link, a.dark:visited { color: orange; } /* Orange is already used a lot in the extension */
    a.dark:link, a.dark:visited {color: #54D0FF;} /* Color easier to see on VGA monitors */
    Completed: 2016.04.01
        
    Issue: Extra vertical scrollbars on screens with lower screen resolutions
        (Tested with a 15-17 inch screen) Smaller screen PC resolutions in combination with smaller vertical screen heights may contribute to the Google Chrome extension appearing with an additional veritical scrollbar next to the iframe's vertical scrollbar - leading to double vertical scrollbars.
    Dev Solutions:
        Make changes specific to device height and width in CSS.
        @media screen and (max-height: 600px) { 
            iframe { /* Noticed the additional vertical scrollbar with a less resolution monitor */
                height: 534px;
            }
        }
    Completed: 2016.04.01